/*
Laboratory OS 2 / Exercise 1 / Question 1 / 2021-22
Name: Athanasiou Vasileios Evangelos
Student ID: 19390005
*/

The following commands are given at the beginning of a C program:
1 pid1=fork()?
2 if (pid1==0) { pid2=fork(); }
3 else { pid3=fork(); pid4=fork(); }
...............................
a) How many processes were generated by the previous commands? 
b) What is the "affinity" between them? 
c) Explain briefly how the above processes were generated 
(step/instruction by step/instruction, which fork was used to create 
each one / which pid corresponds to each one, etc.). 
d) Please also provide a schema in which the
hierarchy between the above processes.

----------------------------------------------------------------------------
Answer: 

a) The above commands create five new processes. 

b) More specifically, it is the main parent process P0, where it creates three 
new child processes P1, P3 and P4. The child processes P1 and P3 create,
also creates two new processes children P2 and P5 (see subquestion d). 

(c) The creation of the above processes (P1, P2, P3, P4, P5) is achieved by 
using the "fork()" function imported from the <unistd.h> library. In detail, 
the parent process P0 creates a child process with the command 'pid1 = fork ();'. 
P1. "fork()" returns the value 0 to the new process it created (child process) and 
returns to the parent process an integer positive value, i.e., the 'id' of the process
child process that it created or the value -1, if an error occurred during the execution of the 
'fork()', thus in the creation of the child process. The variable 'pid1' contains either 
the value 0 and corresponds to the child process P1 of the parent process P0, or a 
a positive integer value which is the 'id' of P1 and corresponds to P0 (line 1, pid1 = fork();).
A check is then made with the if-else command for the contents of the variable 
"pid1". In particular, if it contains the value 0, i.e., the child process P1 of the parent process P1 is executed 
process P0, then the 'if' instructions will be executed, i.e., the instruction 'pid2 = fork()'. Η 
"fork ()" creates a new child process P2 of the parent process P1. Therefore, the variable
'pid2' contains either the value 0 and corresponds to the child process P2 of the parent process P1,
or a positive integer value which is the 'id' of P2 and corresponds to P1 (line 2, if (pid1 == 0)
{ pid2 = fork(); }).
Conversely, if, the variable "pid1" does not contain the value 0, i.e., it contains the "id" of the child process P1 of 
parent process P0, then the "else" commands will be executed, i.e., the commands "pid3 = fork ();"
and "pid4 = fork ();". Thoroughly, two new child processes P3 are created with each "fork()", 
P4 of the parent process P0. It is worth noting that process P3 also creates a process 
child P5. This is justified by the assumption that the variable 'pid3' contains the value 0 corresponding to
to the child process P3 of the parent process P0, and therefore, the next instruction to be executed will be 
pid4 = fork ();´", which will result in the creation of a new child process P5 of the parent process 
P3. If, the variable "pid3" contains a positive integer value, then, this is the "id" of the process 
child P3 of the parent process P0 and therefore, the variable corresponds to P0. Finally, since "pid3" 
corresponds to the process P0, i.e., it contains a positive integer value which is the "id" of the process 
child P3, then, 'pid4' corresponds, if it contains the value 0, to the child process P4 of the parent 
process P0, otherwise, if it contains an integer positive value, then it is the 'id' of the process 
child P4 of the parent process P0 and therefore, corresponds to P0. Conversely, if 'pid3' corresponds to
to process P3, i.e., it contains the value 0, then 'pid4' corresponds, since it contains the value 0, to
child process P5 of the parent process P3. Otherwise, if it contains a positive integer value, which is 
"id" of the child process P5 of the parent process P3, then "pid4" corresponds to P3 (line 3, else 
{ pid3=fork(); pid4=fork(); }).


(d) 					 (P0)
					  /|\
					 / | \
				        /  |  \
	 			       /   |   \ 
                                      /    |    \
                                   (P1)  (P3) (P4)
                                    /      |
                                   /       |
                                  /        | 
                                 /         |
                              (P2)       (P5)







